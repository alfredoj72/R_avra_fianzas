
paquetes_necesarios = c("dplyr", "ggplot2") #c("readxl","RPostgres","sf","dplyr","writexl")

for (paq in paquetes_necesarios){
  if (!(paq %in% rownames(installed.packages()))){
    install.packages(paq, dependencies = T)}
  library(paq, character.only = T)
}


rm(list =ls())

#Cargo los datos y me quedo con las viviendas que han casado con una vivienda
#del catastro (1 registro avra - 1 vivienda catastro)
load("datos.RData")

Fianzas_viviendas <- avra_catastro %>%
                     filter (comp == 1) %>%
                     select(-cat.media_superf, -cat.mediana_superf,
                            -cat.moda_superf, -cat.desv_tip_superf,
                            -cat.frecuencias, -comp)

rm(avra, avra_catastro, tabla_frecuencias,Municipios_catastro)

# CREO CAMPOS 
# precio por m2
Fianzas_viviendas$renta_m2 <- Fianzas_viviendas$importe_de_la_renta /
  Fianzas_viviendas$stotalocal_14
# proporcion existente entre la superficie de la vivienda y la de la parcela
Fianzas_viviendas$tasa_superf <- Fianzas_viviendas$stotalocal_14 / 
  Fianzas_viviendas$sup_parcela

# 
# df_info <- data.frame(
#   Campo = names(Fianzas_viviendas),
#   Tipo_de_dato = unlist(sapply(Fianzas_viviendas,
#                                function(x) paste(class(x), collapse = ", "))),
#   stringsAsFactors = FALSE
# )

#Declaro cuáles son los factores

Fianzas_viviendas <- Fianzas_viviendas %>%
   mutate (sexo_arrendador = factor(sexo_arrendador),
           tipo_persona_arrendador = factor(tipo_persona_arrendador),
           tipo_entidad_arrendador = factor(tipo_entidad_arrendador),
           sexo_arrendatario = factor(sexo_arrendatario),
           nacionalidad_arrendatario = factor(nacionalidad_arrendatario),
           municipio_806 = factor(municipio_806),
           provincia_806 = factor(provincia_806),
           cod_postal_806 = factor(cod_postal_806),
           tipo_de_arrendamiento = factor(tipo_de_arrendamiento),
           tip_const4d_14 = factor(tip_const4d_14))

# La descripción de variables será distinta en función de si la variable es
# tipo numerico, texto o factor.

cat ("El número total de registros es ", nrow(Fianzas_viviendas), "\n\n")


# Función para obtener la descripción de una columna de texto
get_text_description <- function(column) {
  distinct_values <- length(unique(column))
  values <- unique(column)
  num_na <- sum(is.na(column))
  result <- list(
    distinct_values = distinct_values,
    values = values,
    num_na = num_na
  )
  return(result)
}

# Función para obtener la descripción de una columna numérica
get_numeric_description <- function(column) {
  result <- list(
    summary = summary(column),
    mode = Mode(column),
    IQR = IQR(column, na.rm = TRUE),
    sd = sd(column),
    num_na = sum(is.na(column))
  )
  return(result)
}
# Función para calcular la moda de una columna numérica
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

# Obtener descripción de cada columna del dataframe
for (col in names(Fianzas_viviendas)) {
  column <- Fianzas_viviendas[[col]]
  
  cat("Columna '", col, "':\n")
  
  if (is.character(column) | is.factor(column)) {
    # Columna de texto
    description <- get_text_description(column)
    cat("Número de valores distintos:", description$distinct_values, "\n")
    if (description$distinct_values <= 10) {
      cat("Valores distintos:\n")
      value_counts <- table(column)
      for (i in seq_along(value_counts)) {
        cat(value_counts[i], ":", names(value_counts)[i], "\n")
      }
       if (description$num_na > 0) {
       cat(description$num_na, ": NA's \n")
       }
    }
  } else if (is.numeric(column)) {
    # Columna numérica
    description <- get_numeric_description(column)
    cat("Resumen estadístico:\n")
    print(description$summary)
    cat("Moda:", description$mode, "\n")
    cat("Recorrido intercuantílico (IQR):", description$IQR, "\n")
    cat("Desviación estándar:", description$sd, "\n")
  }
  
  cat("\n")
}



barplot(table(Fianzas_viviendas$tipo_entidad_arrendador), las = 2, cex.names = 0.8)

#para cotejar que coincide con el codigo ine provicia y muncipio del 806

conteo <- sum(Fianzas_viviendas$codigo_ine != Fianzas_viviendas$cod_ine)
cat("Hay", conteo, "registros cuyo valor de código INE de municipio no
    coincide con el asignado a través de la referencia catastral")

Fianzas_viviendas <- Fianzas_viviendas %>% 
         mutate(error_cod_municipio = ifelse(codigo_ine != cod_ine, 
                                             "No coincide",""))

# Duracion de contrato
summary(Fianzas_viviendas$duracion_contrato_años)
boxplot(Fianzas_viviendas$duracion_contrato_años)
densidad <- density(na.omit(Fianzas_viviendas$duracion_contrato_años))
plot(densidad)
hist(Fianzas_viviendas$duracion_contrato_años, breaks = 40)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$duracion_contrato_años,
                  breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 40), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)
print(tabla_frecuencias)
barplot(tabla_frecuencias)


#Fecha de devengo
Hmisc::describe(Fianzas_viviendas$fecha_devengo)
#hay 365 fechas distintas
Hmisc::describe(lubridate::year(Fianzas_viviendas$fecha_devengo))
#Efectivamente todas las fecha de devengo son de 2022

# Numero de habitaciones
summary(Fianzas_viviendas$num_habitaciones)
boxplot(Fianzas_viviendas$num_habitaciones)
densidad <- density(na.omit(Fianzas_viviendas$num_habitaciones))
plot(densidad)
hist(Fianzas_viviendas$num_habitaciones, breaks = 25)
intervalos <- cut(Fianzas_viviendas$num_habitaciones,
                  breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 25), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)
print(tabla_frecuencias)


# busco incongruencias entre numero de habitaciones y superficie de vivienda

# Segmentar los campos en intervalos
segmento_num_hab <- cut(Fianzas_viviendas$stotalocal_14,
                        breaks = c(0, 60, 100, 120, 150, 200, 300, 400, Inf))
segmento_superf <- cut(Fianzas_viviendas$num_habitaciones,
                       breaks = c(0, 1,2,3,4,5,6, Inf))
tabla_contingencia <- table(segmento_num_hab, segmento_superf)
print(tabla_contingencia)


# tipo de arrendamiento 
barplot(table(Fianzas_viviendas$tipo_de_arrendamiento))


# tipo de actualizacion
Hmisc::describe(Fianzas_viviendas$tipo_actualizacion)
#467 valores distintos
aux <- table(Fianzas_viviendas$tipo_actualizacion)
aux <- sort(aux, decreasing = TRUE)
aux2 <- data.frame( names(aux),  aux)
#como se puede ver hay que homogeneizar para poder explotar dicho campo
print(aux2)

# Importe de la fianza. Se compara con el importe de la renta
aux_may <- sum(Fianzas_viviendas$importe_de_la_fianza >
                 Fianzas_viviendas$importe_de_la_renta)
aux_men <- sum(Fianzas_viviendas$importe_de_la_fianza <
                 Fianzas_viviendas$importe_de_la_renta)
aux_ig <- sum(Fianzas_viviendas$importe_de_la_fianza ==
                Fianzas_viviendas$importe_de_la_renta)
print(aux_may)
print(aux_men)
print(aux_ig)
#La mayoria de los registros coinciden,
#algunos la fianza es mayor, muchos de ellos porque afianza dos meses
#los pocos en los que la fianza es menor debe ser porque se está completando
#una fianza anterior por un contrato anterior de menor cuantía


# Importe de la renta
summary(Fianzas_viviendas$importe_de_la_renta)
boxplot(Fianzas_viviendas$importe_de_la_renta)

densidad <- density(na.omit(Fianzas_viviendas$importe_de_la_renta))
plot(densidad)

hist(Fianzas_viviendas$importe_de_la_renta, breaks = 300)

# Filtrar los datos dentro de la zona de interés
datos_zoom <- Fianzas_viviendas[Fianzas_viviendas$importe_de_la_renta >= 0 &
                                Fianzas_viviendas$importe_de_la_renta <= 3000,]

# Crear el histograma con la zona de interés
hist(datos_zoom$importe_de_la_renta, breaks = 100)

# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$importe_de_la_renta,
                  breaks = c(0, 300, 400, 500, 600, 700, 800, 900, 1000,
                             1500,2000,2500, 5000, 32000), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)
print(tabla_frecuencias)

# Identificador de bien inmueble
Hmisc::describe(Fianzas_viviendas$id_bi)
#ojo. Hay 30145 valores distintos mientras que de referencias catastrales
#hay 30146
#eso se debe a que hay referencias catastrales que tienen igual los primeros 18 dígitos
#y los dos últimos distintos. Un de las dos referencias catastrales es errónea
print(length(unique(Fianzas_viviendas$referencia_catastral)))
print(length(unique(substr(Fianzas_viviendas$referencia_catastral,1,18))))

Fianzas_viviendas <- Fianzas_viviendas %>% 
  mutate(rc18 = substr(referencia_catastral,1,18)) %>%
  group_by(rc18) %>%
  mutate(rep_rc18 = n())
Fianzas_viviendas <- Fianzas_viviendas %>% 
  mutate(rc_2 = substr(referencia_catastral,19,20)) %>%
  group_by(rc_2) %>%
  mutate(rep_rc_2 = n())

kk <- Fianzas_viviendas %>%
  filter(rep_rc18 == 2 & rep_rc_2 == 1)
# la referencia catastral 9590202VG4099B0025M es incorrecta, debe ser
# 9590202VG4099B0025MA


# Identificador de vivienda
Hmisc::describe(Fianzas_viviendas$idvcat)
#coincide en numero con los bienes inmuebles distintos





























#*******************************************************
# Comenzamos la exploración

nrow(Fianzas_viviendas)


#Lo haré campo a campo
Hmisc::describe(Fianzas_viviendas$codigo_expediente__rue)
#son todos valores distintos, correcto

Hmisc::describe(Fianzas_viviendas$numero_documento)
#son todos valores distintos, correcto

Hmisc::describe(Fianzas_viviendas$nif_cif_arrendador_anonimizado)
#eN los 32356 fianzas, hay solo 25067 arrendadores distintos

Hmisc::describe(Fianzas_viviendas$sexo_arrendador)
#correcto, todo mujeres, valores o nulo

Hmisc::describe(Fianzas_viviendas$tipo_persona_arrendador)
#correcto, todo personas físicas o jurídicas o nulo
#ojo muchísimo arrendador persona física. No es estraño que sean más que los profesionales??

Hmisc::describe(Fianzas_viviendas$tipo_entidad_arrendador)
table(Fianzas_viviendas$tipo_entidad_arrendador)
barplot(table(Fianzas_viviendas$tipo_entidad_arrendador), las = 2, cex.names = 0.8)

Hmisc::describe(Fianzas_viviendas$sexo_arrendatario)

Hmisc::describe(Fianzas_viviendas$nacionalidad_arrendatario)


Hmisc::describe(Fianzas_viviendas$referencia_catastral)
#todas rellenas

Hmisc::describe(nchar(Fianzas_viviendas$referencia_catastral))
#Hay 5 referencias catastrales con menos de 20 dígitos. Son un error

#HACER.
#traer a la tabla el código ine a partir de codigo provincia y municipio de id_bi
#para cotejar que coincide con el codigo ine provicia y muncipio del 806

#HACER
#traer tabla que traduzca de código postal a cod ine y cotejar que coincide con el
#de municipio y provincia de la referencia catastral

summary(Fianzas_viviendas$duracion_contrato_años)
boxplot(Fianzas_viviendas$duracion_contrato_años)

densidad <- density(na.omit(Fianzas_viviendas$duracion_contrato_años))
plot(densidad)

hist(Fianzas_viviendas$duracion_contrato_años, breaks = 40)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$duracion_contrato_años,
                  breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 40), include.lowest = TRUE)

# Obtener la tabla de frecuencias
tabla_frecuencias <- table(intervalos)

# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)

Hmisc::describe(Fianzas_viviendas$fecha_devengo)
#hay 365 fechas distintas
Hmisc::describe(lubridate::year(Fianzas_viviendas$fecha_devengo))
#Efectivamente todas las fecha de devengo son de 2022

summary(Fianzas_viviendas$num_habitaciones)
boxplot(Fianzas_viviendas$num_habitaciones)

densidad <- density(na.omit(Fianzas_viviendas$num_habitaciones))
plot(densidad)

hist(Fianzas_viviendas$num_habitaciones, breaks = 25)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$num_habitaciones,
                  breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 25), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)

# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)

Hmisc::describe(Fianzas_viviendas$tipo_de_arrendamiento)
barplot(table(Fianzas_viviendas$tipo_de_arrendamiento))

Hmisc::describe(Fianzas_viviendas$tipo_actualizacion)
#467 valores distintos
aux <- table(Fianzas_viviendas$tipo_actualizacion)
aux <- sort(aux, decreasing = TRUE)
aux2 <- data.frame( names(aux),  aux)
#como se puede ver hay que homogeneizar para poder explotar dicho campo
print(aux2)

#compruebo si el campo importe de la renta es idéntico al importe de la fianza
aux_may <- sum(Fianzas_viviendas$importe_de_la_fianza >
                     Fianzas_viviendas$importe_de_la_renta)
aux_men <- sum(Fianzas_viviendas$importe_de_la_fianza <
                 Fianzas_viviendas$importe_de_la_renta)
aux_ig <- sum(Fianzas_viviendas$importe_de_la_fianza ==
                 Fianzas_viviendas$importe_de_la_renta)
print(aux_may)
print(aux_men)
print(aux_ig)
#La mayoria de los registros coinciden,
#algunos la fianza es mayor, muchos de ellos porque afianza dos meses
#los pocos en los que la fianza es menor debe ser porque se está completando
#una fianza anterior por un contrato anterior de menor cuantía

# reg_dist <- subset(Fianzas_viviendas, Fianzas_viviendas$importe_de_la_fianza <
#                      Fianzas_viviendas$importe_de_la_renta)

summary(Fianzas_viviendas$importe_de_la_renta)
boxplot(Fianzas_viviendas$importe_de_la_renta)

densidad <- density(na.omit(Fianzas_viviendas$importe_de_la_renta))
plot(densidad)

hist(Fianzas_viviendas$importe_de_la_renta, breaks = 125)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$importe_de_la_renta,
                  breaks = c(0, 300, 400, 500, 600, 700, 800, 900, 1000,
                             1500,2000,2500, 5000, 32000), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)

# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)

Hmisc::describe(Fianzas_viviendas$id_bi)
#ojo. Hay 30145 valores distintos mientras que de referencias catastrales
#hay 30146
#eso se debe a que hay referencias catastrales que tienen igual los primeros 18 dígitos
#y los dos últimos distintos. Un de las dos referencias catastrales es errónea
print(length(unique(Fianzas_viviendas$referencia_catastral)))
print(length(unique(substr(Fianzas_viviendas$referencia_catastral,1,18))))

Fianzas_viviendas <- Fianzas_viviendas %>% 
           mutate(rc18 = substr(referencia_catastral,1,18)) %>%
           group_by(rc18) %>%
           mutate(rep_rc18 = n())
Fianzas_viviendas <- Fianzas_viviendas %>% 
  mutate(rc_2 = substr(referencia_catastral,19,20)) %>%
  group_by(rc_2) %>%
  mutate(rep_rc_2 = n())

kk <- Fianzas_viviendas %>%
         filter(rep_rc18 == 2 & rep_rc_2 == 1)
# la referencia catastral 9590202VG4099B0025M es incorrecta, debe ser
# 9590202VG4099B0025MA

Hmisc::describe(Fianzas_viviendas$idvcat)
#coincide en numero con los bienes inmuebles distintos

Hmisc::describe(Fianzas_viviendas$tip_const4d_14)
table(Fianzas_viviendas$tip_const4d_14)
barplot(table(Fianzas_viviendas$tip_const4d_14))


Hmisc::describe(Fianzas_viviendas$stotalocal_14) 
summary(Fianzas_viviendas$stotalocal_14)
boxplot(Fianzas_viviendas$stotalocal_14)


densidad <- density(na.omit(Fianzas_viviendas$stotalocal_14))
plot(densidad)

#pinto solo los menores de 500 m2
menores <- subset(Fianzas_viviendas$stotalocal_14, Fianzas_viviendas$stotalocal_14 < 500)
densidad <- density(na.omit(menores))
plot(densidad)


hist(Fianzas_viviendas$importe_de_la_renta, breaks = 1000)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$stotalocal_14,
                  breaks = c(0, 50, 60, 70, 80, 90, 100, 110, 120,
                             500,17000), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)
# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)


Hmisc::describe(Fianzas_viviendas$a_ant_bim) 
boxplot(Fianzas_viviendas$a_ant_bim)

densidad <- density(na.omit(Fianzas_viviendas$a_ant_bim))
plot(densidad)
#pinto solo los de 1900 en adelante
menores <- subset(Fianzas_viviendas$a_ant_bim, Fianzas_viviendas$a_ant_bim > 1900)
densidad <- density(na.omit(menores))
plot(densidad)

intervalos <- cut(Fianzas_viviendas$a_ant_bim,
                  breaks = c(1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020),
                  include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)
# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)

Hmisc::describe(Fianzas_viviendas$tasa_superf) 
boxplot(Fianzas_viviendas$tasa_superf)
summary(Fianzas_viviendas$tasa_superf)
densidad <- density(na.omit(Fianzas_viviendas$tasa_superf))
plot(densidad)

#cuantos registros tienen un tasa >3 (la estadistica del minsiterio no usa
# los registros donde dicho valor es >3)
#por aqui voy
num_registros <- sum(Fianzas_viviendas$tasa_superf > 3)
#
Fianzas_viviendas_1 <- Fianzas_viviendas[Fianzas_viviendas$tasa_superf <= 3, ]




# ANALISIS DE OUTLIERS EN LOS CAMPOS SUPERFICIE, RENTA, PRECIO / M2 Y
# PROPORCION SUPERFICIE DE VIVIENDA / SUPERFICIE DE PARCELA


# Definir una función para identificar los outliers y crear un nuevo campo
crear_nuevos_campos <- function(vector) {
  q1 <- quantile(vector, 0.25)
  q3 <- quantile(vector, 0.75)
  iqr <- q3 - q1
  limit_inf <- q1 - 1.5 * iqr
  limit_sup <- q3 + 1.5 * iqr
  nuevos_valores <- ifelse(vector < limit_inf | vector > limit_sup, "*","_")
  return(nuevos_valores)
}

# Obtener los nombres de las columnas a las que se les aplicará la función
campos <- c("stotalocal_14", "importe_de_la_renta", "renta_m2")

# Aplicar la función crear_nuevos_campos a los campos seleccionados de df usando lapply
resultados <- lapply(Fianzas_viviendas[campos], crear_nuevos_campos)

# Convertir los resultados en un nuevo data frame
nuevos_campos <- as.data.frame(resultados)

# Cambiar el nombre de los campos con información de outliers
nuevos_nombres <- lapply(campos, function(nombre) paste0("outliers_", nombre))
nuevos_campos <- setNames(nuevos_campos, nuevos_nombres)
nuevos_campos$outliers_t <- paste0 (nuevos_campos$outliers_stotalocal_14,
                                   nuevos_campos$outliers_importe_de_la_renta,
                                   nuevos_campos$outliers_renta_m2)

# Agregar los nuevos campos al dataframe original usando cbind
Fianzas_viviendas <- cbind(Fianzas_viviendas, nuevos_campos)

rm(crear_nuevos_campos, campos, nuevos_campos, nuevos_nombres, resultados)



ggplot(Fianzas_viviendas, aes( x = importe_de_la_renta,
                               y = stotalocal_14,
                               color = outliers_t)) +
       geom_point() +
       labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
            color = "Outliers")


ggplot(Fianzas_viviendas, aes( x = importe_de_la_renta,
                               y = stotalocal_14,
                               color = outliers_t)) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers") +
  coord_cartesian(xlim = c(0, 2000), ylim = c(0, 2000))


#veamos solo los no outlier
Fianzas_viviendas_1 <- Fianzas_viviendas[Fianzas_viviendas$outliers_t == "___", ]

ggplot(Fianzas_viviendas_1, aes( x = importe_de_la_renta,
                               y = stotalocal_14,
                               color = outliers_t)) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers")

#veamos los outliers
Fianzas_viviendas_1 <- Fianzas_viviendas[Fianzas_viviendas$outliers_t != "___", ]

ggplot(Fianzas_viviendas_1, aes( x = importe_de_la_renta,
                                 y = stotalocal_14,
                                 color = outliers_t)) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers")


ggplot(Fianzas_viviendas_1, aes( x = importe_de_la_renta,
                                 y = stotalocal_14,
                                 color = substr(outliers_t,1,2))) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers")+
  coord_cartesian(xlim = c(0, 2000), ylim = c(0, 2000))

ggplot(Fianzas_viviendas_1, aes( x = importe_de_la_renta,
                                 y = stotalocal_14,
                                 color = outliers_renta_m2)) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers")+
  coord_cartesian(xlim = c(0, 2000), ylim = c(0, 2000))


3#voy a analizar los casos más llamativos 
# renta alquiler > 2000
# superficie > 250
# € /m2 > 20

iqr <- IQR(Fianzas_viviendas$stotalocal_14)
third_quartile <- quantile(Fianzas_viviendas$stotalocal_14, 0.75)
limite_conservador <- third_quartile + 4 * iqr
cat("3 cuartil", third_quartile, 
    " - IQR ", iqr, 
    " -- limite conservador >", limite_conservador)


Fianzas_viviendas_2 <- Fianzas_viviendas[
                  Fianzas_viviendas$stotalocal_14 < limite_conservador, ]

Fianzas_viviendas_3 <- Fianzas_viviendas[
                  Fianzas_viviendas$stotalocal_14 > limite_conservador, ]

xlim <- c(0, 500)  # Ajustar los límites del eje x
ylim <- c(0, max(densidad$y)) # Ajustar los límites del eje y
densidad <- density(na.omit(Fianzas_viviendas$stotalocal_14))
plot(densidad, main = "Densidad Superficie Vivienda", xlim = xlim, ylim = ylim)

ylim <- c(0, 0.003) 
plot(densidad, main = "Densidad Superficie Vivienda", xlim = xlim, ylim = ylim)

densidad <- density(na.omit(Fianzas_viviendas_2$stotalocal_14))
plot(densidad)

densidad <- density(na.omit(Fianzas_viviendas_3$stotalocal_14))
plot(densidad)

#voy a ver el histograma de frecuencias
table(Fianzas_viviendas$stotalocal_14)
barplot((Fianzas_viviendas$stotalocal_14))


# Agrupar los datos por bloques de ancho 10
bloques <- cut(Fianzas_viviendas$stotalocal_14, 
               breaks = seq(0, max(Fianzas_viviendas$stotalocal_14) + 10, by = 10),
               include.lowest = TRUE)
barplot(table(bloques), xlim = c(0, 60))



barplot(table(Fianzas_viviendas_2$stotalocal_14))
barplot((Fianzas_viviendas_3$stotalocal_14))


ggplot(Fianzas_viviendas_2, aes( x = importe_de_la_renta,
                               y = stotalocal_14,
                               color = outliers_t)) +
  geom_point() +
  labs(x = "Importe de la renta", y = "Superficie de vivienda" ,
       color = "Outliers") +
       coord_cartesian(xlim = c(0, 2000), ylim = c(0, 2000))






estoy tratando de determinar que registros responden a errores,
es decir o que no corresponden a viviendas
o que se ha introducido un dato incorrecto
entiendo que casas por encima de 500 metros por decir algo no debe haber
y que alquileres por encima de 2000 euros no debe haber?
















qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq


hist(Fianzas_viviendas$importe_de_la_renta, breaks = 125)
# Definir los intervalos o categorías para agrupar los valores numéricos
intervalos <- cut(Fianzas_viviendas$importe_de_la_renta,
                  breaks = c(0, 300, 400, 500, 600, 700, 800, 900, 1000,
                             1500,2000,2500, 5000, 32000), include.lowest = TRUE)
tabla_frecuencias <- table(intervalos)

# Imprimir la tabla de frecuencias
print(tabla_frecuencias)
barplot(tabla_frecuencias)











